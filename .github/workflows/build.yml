name: Build & test

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - leading
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  build:
    # Skip build if head commit contains 'skip ci'
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    runs-on: ubuntu-latest
    timeout-minutes: 30

    # You have to specify the environment to use secrets.
    environment: production
    steps:
      - name: Check out
        uses: actions/checkout@v2
        
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Run Android Lint
        run: ./gradlew lintDebug

      - name: Build with Gradle
        run: |
          if [[ -n "${{ secrets.KEYSTORE_BASE64 }}" ]]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/release.keystore
            export KEYSTORE_PASSWORD="${{ secrets.KEYSTORE_PASSWORD }}"
            export KEY_ALIAS="${{ secrets.KEY_ALIAS }}"
            export KEY_PASSWORD="${{ secrets.KEY_PASSWORD }}"
          fi
          export ENV_API_KEY="${{ secrets.API_KEY }}"
          ./gradlew assembleRelease

      # Cache build files for later deploy
      - name: Cache build files
        id: cache_build_id
        uses: actions/cache@v2
        with:
          path: app/build/outputs/apk/
          key: ${{ runner.os }}-${{ hashFiles('app/build.gradle') }}

  local-test:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Run Local Unit Test
        run: ./gradlew testDebug

      - name: Upload Reports
        uses: actions/upload-artifact@v2
        with:
          name: Local-Test-Reports
          path: app/build/reports/tests/*
        if: always()

  android-emulator-test:
    runs-on: macos-latest
    needs: build
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        api-level: [ 29, 30 ]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      # setup JDK
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      # Determin emulator image to use according to api-level.
      # https://docs.github.com/ja/actions/learn-github-actions/workflow-commands-for-github-actions#example
      - name: Set the emulator target name to GITHUB_ENV 
        id: setup_target_name
        run: |
          target="default"
          if [ "${{ matrix.api-level }}" -ge "29" ]; then
            target="google_apis"
          fi
          echo "env_target=$target" >> $GITHUB_ENV

      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ env.env_target }}
          arch: x86
          profile: Galaxy Nexus
          script: ./gradlew :app:connectedCheck --stacktrace 

      # Upload results as a artifact even if the test failed
      - name: Upload Reports
        uses: actions/upload-artifact@v2
        with:
          name: Android-Test-Reports-API${{ matrix.api-level }}
          path: app/build/reports
        if: always()
  
  deploy:
    runs-on: ubuntu-latest
    needs: [ build, local-test, android-emulator-test ]
    timeout-minutes: 10

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Load build files from cache
        id: cache-build
        uses: actions/cache@v2
        with:
          path: app/build/outputs/apk/
          key: ${{ runner.os }}-${{ hashFiles('app/build.gradle') }}

      - name: Upload apk file
        uses: actions/upload-artifact@v2
        with:
          name: apk
          path: app/build/outputs/apk/release/*
          retention-days: 3
